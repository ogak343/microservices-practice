spring:
  application:
    name: customer-service
  config:
    import: optional:configserver:127.0.0.1:8888
  datasource:
    url: jdbc:postgresql://127.0.0.1:5433/customer_db
    username: customer
    password: customer
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
  liquibase:
    default-schema: public
    liquibase-schema: public
    change-log: classpath:db/changelog/Initializer.xml
  data:
    redis:
      timeout: 30 #in minutes
      host: 127.0.0.1
      password: redis_password
      port: 6379
  cloud:
    openfeign:
      autoconfiguration:
        jackson:
          enabled: true
  security:
    oauth2:
      keycloak-host: 127.0.0.1:8090
      keycloak-realm: online-store  #You have to create realm "online-store" in keycloak
      keycloak-base: /realms/${spring.security.oauth2.keycloak-realm}
      keycloak-admin: /admin/realms/${spring.security.oauth2.keycloak-realm}
      resourceserver:
        jwt:
          issuer-uri: ${spring.security.oauth2.keycloak-base}
          jwk-set-uri: ${spring.security.oauth2.keycloak-base}/protocol/openid-connect/certs
      client:
        provider:
          keycloak:
            issuer-uri: ${spring.security.oauth2.keycloak-base}
            token-uri: ${spring.security.oauth2.keycloak-base}/protocol/openid-connect/token
            user-info-uri: ${spring.security.oauth2.keycloak-base}/protocol/openid-connect/userinfo
            authorization-uri: ${spring.security.oauth2.keycloak-base}/protocol/openid-connect/auth
            user-name-attribute: preferred_username
        registration:
          keycloak:
            provider: keycloak
            client-id: customer-service #You have to create client "customer-service" in keycloak
            client-secret: P02FBmbvg26XgMwckTjD1DNg6j5ZYGeM #client secret here
            authorization-grant-type: client_credentials


server:
  port: 8081

kafka:
  topic:
    email: topicEmail
#    sms: topicSMS


